@inherits OwningComponentBase
@implements IDisposable
@using TandemBooking.Models;
@using Microsoft.Extensions.DependencyInjection;
 
@if (Model != null)
{
    <EditForm Model="Model" OnValidSubmit="Save" class="form-horizontal">
        <div class="form-group">
            <label class="col-md-4">Payment Type</label>
            <div class="col-md-8">
                <InputSelect @bind-Value="Model.PaymentType" class="form-control">
                    <option value="@TandemBooking.Models.PaymentType.IZettle">iZettle</option>
                    <option value="@TandemBooking.Models.PaymentType.Vipps">Vipps</option>
                    <option value="@TandemBooking.Models.PaymentType.Other">Other</option>
                </InputSelect>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-4">Id</label>
            <div class="col-md-8">
                <InputText @bind-Value="Model.ExternalRef" class="form-control" />
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-4">Name</label>
            <div class="col-md-8">
                <InputText @bind-Value="Model.Name" class="form-control" />
            </div>
        </div>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <div class="form-group">
            <div class="col-md-offset-4 col-md-8">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid? PaymentAccountId { get; set; }
    [Parameter] public EventCallback<PaymentAccount> OnComplete { get; set; }

    [Inject] IServiceScopeFactory ScopeFactory { get; set; }

    private IServiceScope Scope { get; set; }
    private TandemBookingContext Db { get; set; }

    protected string ErrorMessage { get; set; }
    protected PaymentAccount Model { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Scope?.Dispose();
        Scope = ScopeFactory.CreateScope();
        Db = Scope.ServiceProvider.GetService<TandemBookingContext>();

        if (PaymentAccountId != null)
        {
            Model = await Db.PaymentAccounts.FindAsync(PaymentAccountId.Value);
        }
        else
        {
            Model = new PaymentAccount
            {
            };
            Db.Add(Model);
        }
    }

    public void Dispose()
    {
        Scope?.Dispose();
        Scope = null;
    }

    protected async Task Save()
    {
        ErrorMessage = "";

        var duplicate = Db.PaymentAccounts.FirstOrDefault(a => a.Id != Model.Id && a.PaymentType == Model.PaymentType && a.ExternalRef == Model.ExternalRef);
        if (duplicate != null)
        {
            ErrorMessage = "Duplicate Id";
            return;
        }

        await Db.SaveChangesAsync();
        await OnComplete.InvokeAsync(Model);

        Scope?.Dispose();
        Scope = null;
    }

    protected async Task Cancel()
    {
        await OnComplete.InvokeAsync(null);
        Scope?.Dispose();
        Scope = null;
    }
}